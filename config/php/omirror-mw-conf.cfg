##################################################################
# 
# this build out will try to generate the MediaWiki configuration
# file for OMirror platform.
#
# It will mainly stay here as an example.
#
# we should normally get started from the mediawiki-conf.cfg.
#

[omirror-mw-conf]
# the base part is defined in file config/base.cfg
<= base-generate-file-from-inline
# OMirror wiki is install in a WordPress installation.
# separate script path from article path
target-folder = ${settings:document-root}/wiki
filename = LocalSettings.php
mode = 644
file-content  = 
    <?php
    ${omirror-mw-legacy:the-content}

####################################################################
#
# legacy configuration for OMirror wiki.
# we start from here.
#
[omirror-mw-legacy]
# we will extend the this part from the mw-conf-basic
#  - defined in file cfgrepo/config/php/mediawiki-conf.cfg
# so we could share the basic properties for the media wiki setup.
# reference the mediawiki-conf.cfg file for all variables.
<= mw-conf-basic

wiki-path = /wiki
wgSitename = OMirror
wgServerDomain = omirror.com
wgServer = //${:wgServerDomain}
the-content =
    error_reporting( -1);
    //ini_set( 'display_errors', 1);
    //ob_start();

    # Protect against web entry
    if ( !defined( 'MEDIAWIKI' ) ) {
    	exit;
    }

    // MW_INSTALL_PATH is used for some mantainance script.
    if( defined( 'MW_INSTALL_PATH' ) ) {
        $IP = MW_INSTALL_PATH;
    } else {
        $IP = dirname( __FILE__ );
    }

    $path = array( $IP, "$IP/includes", "$IP/languages" );
    set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

    require_once( "$IP/includes/DefaultSettings.php" );

    // set up time zone.
    $wgLocaltimezone = "America/Toronto";
    date_default_timezone_set( $wgLocaltimezone );

    // ===========
    // increase the mimory limit.
    # If PHP's memory limit is very low, some operations may fail.
    ini_set( 'memory_limit', '2048M' );
    # set maximum upload size for the wiki lower than the PHP absolute max
    ini_set( 'post_max_size', '2048M' );
    ini_set( 'upload_max_filesize', '2048M' );

    if ( $wgCommandLineMode ) {
        if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
            die( "This script must be run from the command line\n" );
        }
    }
    
    ## Uncomment this to disable output compression
    # $wgDisableOutputCompression = true;

    // this will become the project namespace.
    $wgSitename = "${:wgSitename}";

    ## The URL base path to the directory containing the wiki;
    ## defaults for all runtime URL paths are based off of this.
    ## For more information on customizing the URLs
    ## (like /w/index.php/Page_title to /wiki/Page_title) please see:
    ## http://www.mediawiki.org/wiki/Manual:Short_URL
    $wgScriptPath       = "${:wiki-path}";
    $wgScriptExtension  = ".php";
    $wgArticlePath = "${:wiki-path}/$1";
    $wgUsePathInfo = true;

    ## The protocol and server name to use in fully-qualified URLs
    $wgServer = "${:wgServer}";
    
    ## The relative URL path to the logo.  Make sure you change this from the default,
    ## or else you'll overwrite your logo when you upgrade!
    #$wgLogo             = "/wiki/skins/Vector/images/wiki.png";
    
    ## UPO means: this is also a user preference option
    
    $wgEnableEmail = true;
    $wgEnableUserEmail = false; # UPO
    
    $wgEmergencyContact = "${:contact-email}";
    $wgPasswordSender = "${:no-reply-email}";
    
    $wgEnotifUserTalk = true; # UPO
    $wgEnotifWatchlist = true; # UPO
    $wgEmailAuthentication = true;
    $wgEmailConfirmToEdit = false;
    
    ## Database settings
    $wgDBtype = "${:wgDBtype}";
    $wgDBserver = "${:wgDBserver}";
    $wgDBname = "${:wgDBname}";
    $wgDBuser = "${:wgDBuser}";
    $wgDBpassword = "${:wgDBpassword}";
    # MySQL specific settings
    $wgDBprefix = "${:wgDBprefix}";
    # MySQL table options to use during installation or update
    $wgDBTableOptions = "${:wgDBTableOptions}";
    # Experimental charset support for MySQL 5.0.
    $wgDBmysql5 = false;

    # TODO: NOT USE for now.
    ## Shared memory settings
    #$wgMainCacheType = CACHE_NONE;
    #$wgMainCacheType = CACHE_MEMCACHED;
    #$wgParserCacheType = CACHE_MEMCACHED; # optional
    #$wgMessageCacheType = CACHE_MEMCACHED; # optional
    #$wgMemCachedServers = array("10.77.11.234:11211");
    #$wgMemCachedServers = array("127.0.0.1:11211");

    ## To enable image uploads, make sure the 'images' directory
    ## is writable, then set this to true:
    $wgEnableUploads = true;
    $wgUseImageMagick = true;
    $wgImageMagickConvertCommand = "/usr/bin/convert";

    # InstantCommons allows wiki to use images from http://commons.wikimedia.org
    $wgUseInstantCommons = false;

    ## If you use ImageMagick (or any other shell command) on a
    ## Linux server, this will need to be set to the name of an
    ## available UTF-8 locale
    $wgShellLocale = "en_US.utf8";

    ## If you want to use image uploads under safe mode,
    ## create the directories images/archive, images/thumb and
    ## images/temp, and make them all writable. Then uncomment
    ## this, if it's not already uncommented:
    #$wgHashedUploadDirectory = false;
    
    ## Set $wgCacheDirectory to a writable directory on the web server
    ## to make your wiki go slightly faster. The directory should not
    ## be publically accessible from the web.
    #$wgCacheDirectory = "$IP/cache";
    
    $wgUseTeX           = false;
    
    $wgLocalInterwiki   = $wgSitename;
    
    # Site language code, should be one of the list in ./languages/Names.php
    $wgLanguageCode = "en";
    
    $wgSecretKey = "c824ab25743505c972f4d6280e38e71213e421a11d65b374170aecf853918163";
    
    # Site upgrade key. Must be set to a string (default provided) to turn on the
    # web installer while LocalSettings.php is in place
    $wgUpgradeKey = "0af267bd8c04dc34";

# set up skins.
    ## The relative URL path to the skins directory
    $wgStylePath = "$wgScriptPath/skins";

    wfLoadSkin( 'Vector' );
    wfLoadSkin( 'MonoBook' );
    wfLoadSkin( 'Modern' );
    wfLoadSkin( 'CologneBlue' );
    
    ## Default skin: you can change the default skin. Use the internal symbolic
    ## names, ie 'cologneblue', 'monobook', 'vector':
    $wgDefaultSkin = "vector";

    $wgOPSpediaMasterUseIconWatch = true;

    ## For attaching licensing metadata to pages, and displaying an
    ## appropriate copyright notice / icon. GNU Free Documentation
    ## License and Creative Commons licenses are supported so far.
    $wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
    $wgRightsUrl = "";
    $wgRightsText = "";
    $wgRightsIcon = "";

    # Path to the GNU diff3 utility. Used for conflict resolution.
    $wgDiff3 = "/usr/bin/diff3";

    # End of automatically generated settings.
    # Add more configuration options below.

    # When you make changes to this configuration file, this will make
    # sure that cached pages are cleared.
    $wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

    # enable the FCKeditor in the wiki
    #require_once( "extensions/FCKeditor/FCKeditor.php" );
    #require_once("$IP/extensions/FCKeditor/FCKeditor.php");
    
    # Address the time difference
    #$wgLocalTZoffset = 'America/New_York';
    #$wgLocalTZoffset = date("Z") / 60;
    
    if(!$wgCommandLineMode) {
        #Enable Wordpress login integration
        require_once('extensions/AuthWP.php');
        $wgAuth=new AuthWP();
    }
    
    #require_once("$IP/extensions/Renameuser/SpecialRenameuser.php");
    
    # The following line is supposed to disable account creation
    $wgGroupPermissions['*']['createaccount'] = false;
    
    # enable ajax in mediawiki
    $wgUseAjax = true;
    # enable the category: tree extension
    require_once("{$IP}/extensions/CategoryTree/CategoryTree.php");
    # enable the Cite extension
    wfLoadExtension('Cite');
    # enable the special:cite page, enable "cite this page" link
    //require_once('extensions/Cite/SpecialCite.php');
    # enable WikiArticleFeeds extension
    require_once('extensions/WikiArticleFeeds/WikiArticleFeeds.php');
    # enable google charts extension for mediawiki
    require_once("{$IP}/extensions/gchart4mw.php");

    # tell mediawiki to ignore mimetypes
    $wgVerifyMimeType = false;
    
    # set permitted file extensions for upload
    $wgFileExtensions = array(${:wgFileExtensions});

    # enable the inputbox extension
    wfLoadExtension('InputBox');

    # set default image size on image preview pages to 640x480
    $wgDefaultUserOptions['imagesize'] = 1;

    # enable ParserFunctions extension
    wfLoadExtension('ParserFunctions');

    # enable StringFunctions Extension
    require_once ("$IP/extensions/StringFunctions/StringFunctions.php");
    require_once ("$IP/extensions/Widgets/Widgets.php");
    
    # enable File links - see http://www.mediawiki.org/wiki/UNC_links
    array_push($wgUrlProtocols, "file://");
    
    # enable CategoryWatch Extension - see http://www.mediawiki.org/wiki/Extension:CategoryWatch
    wfLoadExtension('CategoryWatch');
    $wgCategoryWatchUseAutoCat   = true;
    
    # enable file caching
    $wgUseFileCache = false; /* default: false */
    $wgFileCacheDirectory = "$IP/cache";
    $wgShowIPinHeader = false;
    $wgDisableCounters = true;
    
    # enable wikicategorytagclouds
    require_once("$IP/extensions/WikiCategoryTagCloud/WikiCategoryTagCloud.php"); // Wiki Category Tag Cloud extension
    
    # enable sytaxhighlight extension
    wfLoadExtension( 'SyntaxHighlight_GeSHi' );
    
    $wgMaxUploadSize = 52428800;
    
    # enable Semantic Mediawiki
    #include_once("$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php");
    #enableSemantics('intra.net.gov.on.ca');
    #
    ## enable Semantic Forms
    #include_once("$IP/extensions/SemanticForms/SemanticForms.php");
    
    # enable cacheing of Semantic Form defintions
    #$sfgCacheFormDefinitions = true;
    
    # disable inline errors in SMW
    #$smwgInlineErrors = false;
    
    # enable RSS mediawiki extension - displays an RSS feed on a MW page
    require_once("$IP/extensions/RSS/RSS.php");
    
    # enable new magic word - No Cache
    require_once( "$IP/extensions/MagicNoCache/MagicNoCache.php" );
    
    # enable Google Analytics tracking extension
    #require_once( "$IP/extensions/googleAnalytics/googleAnalytics.php" );
    
    #turn on wiki maintenance mode
    #$wgReadOnly = "The OPSpedia wiki is in MAINTENANCE MODE - you will be unable to edit wiki pages for a short time - Our apologies for the inconvenience." ;
    
    $wgExternalLinkTarget = '_blank';
    
    # enable subpage for Project / OPSpedia namespace:
    $wgNamespacesWithSubpages[NS_MAIN] = true;
    $wgNamespacesWithSubpages[NS_PROJECT] = true;
    
    wfLoadExtension('WikiEditor');
    
    # Enables use of WikiEditor by default but still allow users to disable it in preferences
    $wgDefaultUserOptions['usebetatoolbar'] = 1;
    $wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
    
    # Displays the Preview and Changes tabs
    $wgDefaultUserOptions['wikieditor-preview'] = 1;
    
    # Displays the Publish and Cancel buttons on the top right side
    $wgDefaultUserOptions['wikieditor-publish'] = 0;
    
    
    require_once "$IP/extensions/VisualEditor/VisualEditor.php";
    # Enable by default for everybody
    $wgDefaultUserOptions['visualeditor-enable'] = 1;
    # Don't allow users to disable it
    $wgHiddenPrefs[] = 'visualeditor-enable';
    # OPTIONAL: Enable VisualEditor's experimental code features
    $wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;
    # config the rest API to Parsoid service.
    $wgVirtualRestConfig['modules']['parsoid'] = array(
    // URL to the Parsoid instance
    // Use port 8142 if you use the Debian package
    'url' => 'http://10.77.11.234:9036',
    //'url' => 'http://10.77.8.118:9036',
    // Parsoid "domain", see below (optional)
    //'domain' => 'intra.net.gov.on.ca',
    // Parsoid "prefix", see below (optional)
    //'prefix' => 'intra.net.gov.on.ca'
    );
    # config the visual editor available namespaces.
    # default namespaces listed on this page:
    # https://www.mediawiki.org/wiki/Manual:Namespace_constants
    $wgVisualEditorAvailableNamespaces[NS_PROJECT] = true;
    $wgVisualEditorAvailableNamespaces[NS_CATEGORY] = true;
    $wgVisualEditorAvailableNamespaces[NS_FILE] = true;
    $wgVisualEditorAvailableNamespaces[NS_HELP] = true;
    $wgVisualEditorAvailableNamespaces[NS_HELP_TALK] = true;
    $wgVisualEditorAvailableNamespaces[NS_USER] = true;
    $wgVisualEditorAvailableNamespaces[NS_USER_TALK] = true;
    
    $wgShowExceptionDetails = true;
    
    $wgGroupPermissions['*']['edit'] = false;
    $wgVisualEditorTabPosition = 'before';
    
    require_once( "$IP/extensions/PluploadUtils/PluploadUtils.php" );
    
    //require_once(dirname(__FILE__) . '/../wp-load.php');
    header('X-UA-Compatible: IE=8');
    $wgCookieExpiration = 0;
    $wgResourceLoaderMaxage = array(
      'versioned' => array(
        'server' => 30 * 24 * 60 * 60,
        'client' => 30 * 24 * 60 * 60, // 30 days
      ),
      'unversioned' => array(
        'server' => 30 * 24 * 60 * 60,
        'client' => 30 * 24 * 60 * 60, // 30 days
      )
    );
    //$wgShowSQLErrors = true;
    //
    //$wgShowExceptionDetails = true;
    
    
    require_once( "$IP/extensions/TracUtils/TracUtils.php" );
    
    // TemplateData Extension
    wfLoadExtension('TemplateData');
    $wgTemplateDataUseGUI = true;
    
    //$wgDebugToolbar = true;
    //$wgShowDebug = false;
    
    #Dynamic Page List
    require_once("$IP/extensions/intersection/DynamicPageList.php");
    # Configuration variables. Warning: These use DLP instead of DPL
    # for historical reasons (pretend Dynamic list of pages)
    $wgDLPmaxCategories = 6;                // Maximum number of categories to look for
    $wgDLPMaxResultCount = 200;             // Maximum number of results to allow
    $wgDLPAllowUnlimitedResults = false;    // Allow unlimited results
    $wgDLPAllowUnlimitedCategories = false; // Allow unlimited categories
    // How long to cache pages using DPL's in seconds. Default to 1 day. Set to
    // false to use the normal amount of page caching (most efficient), Set to 0 to disable
    // cache altogether (inefficient, but results will never be outdated)
    $wgDLPMaxCacheTime = 60*60*24;          // How long to cache pages in seconds
    
    # pchart4mw
    //require_once( "$IP/extensions/pchart4mw/pChart4mw.php" );
    
    # re: ticket #3629, this will also allow Word 2007 .doc files
    //$wgAllowJavaUploads = true;
    //$wgCrossSiteAJAXdomains = array( '*.gov.on.ca' );
    $wgCrossSiteAJAXdomains = array( '*.gov.on.ca' );
    
    //require_once( "$IP/extensions/PdfHandler/PdfHandler.php" );
    //require_once "$IP/extensions/UploadWizard/UploadWizard.php";                                
    //$wgUploadNavigationUrl = '/wiki/Special:UploadWizard'; 
    wfLoadExtension('PdfHandler');
    
    require_once("$IP/extensions/MultimediaViewer/MultimediaViewer.php");
    $wgMediaViewerIsInBeta = false;
    # default is true
    $wgMediaViewerEnableByDefault = true;
    # default is true
    $wgMediaViewerEnableByDefaultForAnonymous = true;
    
    # UploadWizard extension
    require_once("$IP/extensions/UploadWizard/UploadWizard.php");
    $wgUploadNavigationUrl = '/wiki/Special:UploadWizard';
    # Needed to make UploadWizard work in IE, see bug 39877
    $wgApiFrameOptions = 'SAMEORIGIN';
    # UploadWizard Settings
    $wgUploadWizardConfig['tutorial']['skip'] = true; // skip the tutorial
    $wgUploadWizardConfig['licensing']['defaultType'] = 'ownWork'; // default choice
    $wgUploadWizardConfig['licensing']['ownWorkDefault'] = 'own'; // show only you own picture
    
    wfLoadExtension('Gadgets');
    
    wfLoadExtension('Elastica');
    require_once("$IP/extensions/CirrusSearch/CirrusSearch.php");
    # set the IP to elastic search server.
    $wgCirrusSearchServers = array('10.77.11.234');
    $wgSearchType = 'CirrusSearch';
    #$wgCirrusSearchWikimediaExtraPlugin[ 'id_hash_mod_filter' ] = true;
    
    require_once("$IP/extensions/Scribunto/Scribunto.php");
    $wgScribuntoDefaultEngine = 'luastandalone';
    $wgScribuntoUseGeSHi = true;
    $wgScribuntoUseCodeEditor = true;
    
    wfLoadExtension( 'CodeEditor' );
    
    wfLoadExtension( 'Interwiki' );
    // To grant sysops permissions to edit interwiki data
    $wgGroupPermissions['sysop']['interwiki'] = true;
    $wgAllowUserJs = true;
    
    //Maximum amount of virtual memory available to shell processes under Linux, in KB.
    // 102400KB = 100MB
    $wgMaxShellMemory = 512000;
    $wgJobRunRate = 0;
