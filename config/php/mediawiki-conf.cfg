##################################################################
#
# try to generate the MediaWiki configuration file.
# 
# LocalSettings.php
#

#############################################
#
# generate the mediawiki configuration file fomr inline.
# which is easer to organize and maintain.
#
[mediawiki-conf]
# the base part is defined in file config/base.cfg
<= base-generate-file-from-inline
# assume wiki is installed in a WordPress installation.
target-folder = ${settings:document-root}/wiki
filename = LocalSettings.php
mode = 644
file-content  = 
    <?php
    ${mw-conf-basic:the-content}
    ${mw-conf-cache:the-content}
#    ${mw-conf-permissions:the-content}
#    ${mw-conf-private:the-content}
    ${mw-conf-skins:the-content}
    ${mw-conf-extensions:the-content}

##################################
#
# this part will hold basic configurations.
[mw-conf-basic]
wgSitename = ValutWiki
wgServer = http://dev.vault.leocorn.com

wgDBtype = mysql
wgDBserver = 10.160.192.88:9025
wgDBname = vaultone
wgDBuser = devvault
wgDBpassword = vaultpassword

wgFileExtensions = 'bmp', 'doc', 'docx', 'gif', 'ics', 'jpg', 'jpeg', 'pdf', 'png', 'pps', 'ppt', 'pptx', 'svg', 'swf', 'vcs', 'xls', 'xlsx', 'zip', 'csv', 'json', 'js', 'vsd', 'ico'

no-reply-email = no-reply@leocorn.com
# the content
the-content = 
    # Protect against web entry
    if ( !defined( 'MEDIAWIKI' ) ) {
    	exit;
    }
    ## Uncomment this to disable output compression
    # $wgDisableOutputCompression = true;
# wiki site information.
    $wgSitename = "${:wgSitename}";
    ## The URL base path to the directory containing the wiki;
    ## defaults for all runtime URL paths are based off of this.
    ## For more information on customizing the URLs
    ## (like /w/index.php/Page_title to /wiki/Page_title) please see:
    ## https://www.mediawiki.org/wiki/Manual:Short_URL
    $wgScriptPath = "/wiki";
    $wgArticlePath = "/wiki/$1";
    ## The protocol and server name to use in fully-qualified URLs
    $wgServer = "${:wgServer}";
    ## The URL path to static resources (images, scripts, etc.)
    $wgResourceBasePath = $wgScriptPath;
# site logo
    ## The URL path to the logo.  
    ## Make sure you change this from the default,
    ## or else you'll overwrite your logo when you upgrade!
    $wgLogo = "$wgResourceBasePath/resources/assets/wiki.png";
# user preference options
    ## UPO means: this is also a user preference option
    $wgEnableEmail = true;
    $wgEnableUserEmail = true; # UPO
    $wgEmergencyContact = "${:no-reply-email}";
    $wgPasswordSender = "${:no-reply-email}";
    $wgEnotifUserTalk = false; # UPO
    $wgEnotifWatchlist = false; # UPO
    $wgEmailAuthentication = true;
# database setting.
    ## Database settings
    $wgDBtype = "${:wgDBtype}";
    $wgDBserver = "${:wgDBserver}";
    $wgDBname = "${:wgDBname}";
    $wgDBuser = "${:wgDBuser}";
    $wgDBpassword = "${:wgDBpassword}";
    # MySQL specific settings
    $wgDBprefix = "mw_";
    # MySQL table options to use during installation or update
    $wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";
    # Experimental charset support for MySQL 5.0.
    $wgDBmysql5 = false;
# image uploads.
    ## To enable image uploads, make sure the 'images' directory
    ## is writable, then set this to true:
    $wgEnableUploads = true;
    $wgUseImageMagick = true;
    #$wgImageMagickConvertCommand = "/usr/bin/convert";
    # InstantCommons allows wiki to use images from 
    # https://commons.wikimedia.org
    $wgUseInstantCommons = false;
    ## If you use ImageMagick (or any other shell command) on a
    ## Linux server, this will need to be set to the name of an
    ## available UTF-8 locale
    $wgShellLocale = "en_US.utf8";
    ## If you want to use image uploads under safe mode,
    ## create the directories images/archive, images/thumb and
    ## images/temp, and make them all writable. Then uncomment
    ## this, if it's not already uncommented:
    #$wgHashedUploadDirectory = false;
    ## tell mediawiki to ignore mimetypes set to false to ignore
    #$wgVerifyMimeType = true;
    ## set permitted file extensions for upload
    $wgFileExtensions = array(${:wgFileExtensions});
# mics
    ## Path to the GNU diff3 utility. Used for conflict resolution.
    $wgDiff3 = "/usr/bin/diff3";
    # Site language code, should be one of the list in 
    # ./languages/Names.php
    $wgLanguageCode = "en";
    $wgSecretKey = "9915252ed4463f39159eb3ec3c6d27aca4fe4f561124e05d47353a61e1a461be";
    # Site upgrade key. Must be set to a string 
    # (default provided) to turn on the
    # web installer while LocalSettings.php is in place
    $wgUpgradeKey = "d8c815d40e80e97a";
# config the licensing and copyright for content.
    ## For attaching licensing metadata to pages, and displaying an
    ## appropriate copyright notice / icon. GNU Free Documentation
    ## License and Creative Commons licenses are supported so far.
    $wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
    $wgRightsUrl = "http://creativecommons.org/licenses/by/4.0/";
    $wgRightsText = "Attribution 4.0 International";
    $wgRightsIcon = "https://i.creativecommons.org/l/by/4.0/88x31.png";

##########################
#
# configuration to set up caches.
#
[mw-conf-cache]
the-content =
    ## Shared memory settings
    $wgMainCacheType = CACHE_NONE;
    $wgMemCachedServers = array();
    ## Set $wgCacheDirectory to a writable directory on the 
    ## web server to make your wiki go slightly faster.
    ## The directory should not
    ## be publically accessible from the web.
    #$wgCacheDirectory = "$IP/cache";
# set the cache age for resources served by the resource loader.
# more details on page
# https://www.mediawiki.org/wiki/Manual:$wgResourceLoaderMaxage
    $wgResourceLoaderMaxage = array(
      'versioned' => array(
        'server' => 30 * 24 * 60 * 60,
        'client' => 30 * 24 * 60 * 60, // 30 days
      ),
# default settings for unversioned is 5 minutes.
      'unversioned' => array(
        'server' => 30 * 24 * 60 * 60,
        'client' => 30 * 24 * 60 * 60, // 30 days
      )
    );

###############################
#
# part for set up permissions.
#
[mw-conf-permissions]
permissions-list = 
    # turn off create new user account
    $wgGroupPermissions['*']['createaccount'] = false;
the-content =
    ${:permissions-list}

#################################
#
# the part set up a private wiki, including Image authorization.
#
[mw-conf-private]
# set up the private wiki.
# this will not protect images and media files.
# we need set up img_auth.php to protect images and media files.
wgUploadDirectory = ${buildout:directory}/var/wiki-images
# the REMOTE_ADDR for the Parsoid service, which will
# all wiki/api.php to parse wiki text to HTML and vise versa.
parsoid-remote-addr = 127.0.0.1
private-wiki = 
    # The following permissions were setup a private wiki 
    $wgGroupPermissions['*']['createaccount'] = false;
    $wgGroupPermissions['*']['edit'] = false;
    $wgGroupPermissions['*']['read'] = false;
# here is How to work with VisualEditor and Parsoid service?
    # allow read and edit on the remote addr for parsoid servic.
    if ( $_SERVER['REMOTE_ADDR'] == '${:parsoid-remote-addr}' ) {
        $wgGroupPermissions['*']['read'] = true;
        $wgGroupPermissions['*']['edit'] = true;
    }
# config img_auth.php to protect direct access to media files.
# this section main based on MediaWiki Manual
# https://www.mediawiki.org/wiki/Manual:Image_Authorization
# Web Server need has the corresponding rewrite rule for image
# authorization. 
# here is an example for Ngnix server:
#
# rewrite ^/w/img_auth.php/(.*)$ /w/img_auth.php?path=/$1&$args last;
#
    $wgUploadDirectory = "${:wgUploadDirectory}";
    $wgUploadPath = "$wgScriptPath/img_auth.php";
the-content =
    ${:private-wiki}

##########################
#
# configuration for skins.
#
[mw-conf-skins]
# using the vector as the default skins.
wgDefaultSkin = vector
the-content =
    ## Default skin: you can change the default skin. 
    ## Use the internal symbolic
    ## names, ie 'vector', 'monobook':
    $wgDefaultSkin = "${:wgDefaultSkin}";
    # Enabled skins.
    # The following skins were automatically enabled:
    wfLoadSkin( 'CologneBlue' );
    wfLoadSkin( 'Modern' );
    wfLoadSkin( 'MonoBook' );
    wfLoadSkin( 'Vector' );

##############################
#
# configuarion for extensions.
#
[mw-conf-extensions]
# load the wpmw extension, it is MediaWiki authenticaion plugin
# to using WordPress users as wiki account.
wpmw-extension =
    #$wgAuthWPRelPath = '../..';
    #wfLoadExtension('AuthWP');
# We have to use the legacy way to load this extension.
    if(!$wgCommandLineMode) {
        # Enable Wordpress login integration,
        # have to use " instead of ' as of $IP
        require_once("$IP/extensions/AuthWP/AuthWP.php");
        $wgAuth=new AuthWP();
    }
# extensions come from MediaWiki core.
# since MediaWiki 1.25, function wfLoadExtension will be used to
# load a extension.
core-extensions = 
    # Most extensions are enabled by including 
    # the base extension file here
    # but check specific extension documentation for more details
    # The following extensions were automatically enabled:
    wfLoadExtension( 'Cite' );
    wfLoadExtension( 'CiteThisPage' );
    wfLoadExtension( 'SyntaxHighlight_GeSHi' );
    wfLoadExtension( 'WikiEditor' );
    # Enables use of WikiEditor by default but still 
    # allows users to disable it in preferences
    $wgDefaultUserOptions['usebetatoolbar'] = 1;
    # Enables link and table wizards by default but 
    # still allows users to disable them in preferences
    $wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
    # Displays the Preview and Changes tabs
    $wgDefaultUserOptions['wikieditor-preview'] = 1;
    # Displays the Publish and Cancel buttons on the top right side
    $wgDefaultUserOptions['wikieditor-publish'] = 1;
    # the PdfHandler depends on gs, convert, and pdfinfo.
    # check the extension page for details.
    wfLoadExtension('PdfHandler');

the-content =
    # Enabled Extensions. 
    ${:core-extensions}
    ${:wpmw-extension}
    ${mw-conf-visualeditor:the-config}
    ${mw-conf-uploadwizard:the-config}
    ${mw-conf-cirrussearch:the-config}
    ${mw-conf-multimediaviewer:the-config}
    ${mw-conf-codeeditor:the-config}

############################
#
# dedicate part for VisualEditor extension.
# this is assume:
#
# - VisualEditor extension is installed, mw-visualeditor-build
# - Parsoid service is ready config/nodejs/nodejs-build.cfg
# - Full list of configuration options could be found on the
#   Extension page: 
#   https://www.mediawiki.org/wiki/Extension:VisualEditor
#
[mw-conf-visualeditor]
# properties for Parsoid service!
parsoid-url = http://localhost:9030
parsoid-domain = localhost
parsoid-prefix = localhost
# load the VisualEditor extension.
the-config = 
    require_once "$IP/extensions/VisualEditor/VisualEditor.php";
    # Enable by default for everybody
    $wgDefaultUserOptions['visualeditor-enable'] = 1;
    # Don't allow users to disable it
    $wgHiddenPrefs[] = 'visualeditor-enable';
    # OPTIONAL: Enable VisualEditor's experimental code features
    $wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;
    # config the rest API to Parsoid service.
    $wgVirtualRestConfig['modules']['parsoid'] = array(
      // URL to the Parsoid instance
      // Use port 8142 if you use the Debian package
      'url' => '${:parsoid-url}',
      // Parsoid "domain", see below (optional)
      'domain' => '${:parsoid-domain}',
      // Parsoid "prefix", see below (optional)
      'prefix' => '${:parsoid-prefix}'
    );
    # config the visual editor available namespaces.
    # default namespaces listed on this page:
    # https://www.mediawiki.org/wiki/Manual:Namespace_constants
    $wgVisualEditorAvailableNamespaces[NS_CATEGORY] = true;
    $wgVisualEditorAvailableNamespaces[NS_FILE] = true;

#############################
#
# configuration part for UploadWizard
#
[mw-conf-uploadwizard]
the-config = 
    # still need use the legacy way to load this extension.
    require_once "$IP/extensions/UploadWizard/UploadWizard.php";
    $wgUploadNavigationUrl = '/wiki/Special:UploadWizard';
    $wgUploadWizardConfig = array(
        'debug' => false,
        // Should be localised to the language of 
        // your wiki instance
        'autoAdd' => array(
           'wikitext' => array(
             'This file was uploaded with the UploadWizard extension.'
           ),
           'categories' => array(
             'Uploaded with UploadWizard'   
           ),
        ), 
        'feedbackPage' => 'Feedback about UploadWizard',
        'altUploadForm' => 'Special:Upload',
        'fallbackToAltUploadForm' => false,
        // Should FileAPI uploads be used on supported browsers?
        'enableFormData' => true,
        'enableMultipleFiles' => true,
        'enableMultiFileSelect' => true,
        // Selectable languages for file descriptions - 
        // defaults to 'en'
        'uwLanguages' => array(
            'en' => 'English'
        ),
        // Skip the tutorial
        'tutorial' => array(
            'skip' => true
        ),
        // Number of uploads with one form - defaults to 50
        'maxUploads' => 15,
        // omitting this may cause errors
        'fileExtensions' => $wgFileExtensions
    );

###################################
#
# configuration for CirrusSearch extension
# it depends on Elastia extension
# and ElasticSearch.
[mw-conf-cirrussearch]
the-config =
    wfLoadExtension('Elastica');
    require_once("$IP/extensions/CirrusSearch/CirrusSearch.php");
    # set the IP to slestic search server.
    $wgCirrusSearchServers = array('10.160.192.88');

#############################################
#
# configuarion for MultimediaViewer extension
#
[mw-conf-multimediaviewer]
the-config =
    require_once("$IP/extensions/MultimediaViewer/MultimediaViewer.php");
    $wgMediaViewerIsInBeta = false;
    # default is true
    $wgMediaViewerEnableByDefault = true;
    # default is true
    $wgMediaViewerEnableByDefaultForAnonymous = true;

###################################
#
# configuration for CirrusSearch extension
# it depends on Elastia extension
# and ElasticSearch.
[mw-conf-codeeditor]
the-config =
    wfLoadExtension('CodeEditor');

######################################
#
# some intersting things.
#
[mw-conf-holding]
the-content =
# set up allowed domains for  cross site AJAX call.
    //$wgCrossSiteAJAXdomains = array( '*.gov.on.ca' );
# * will allow all domains.
    $wgCrossSiteAJAXdomains = array( '*' );

############################################
#
# the legacy way to generate configuration file from a template.
#
[mediawiki-conf-template]
<= base-generate-file-from-template

target-folder = ${wordpress-conf:target-folder}/wiki
filename = LocalSettings.php
# this default mediawiki config file is assume that
# the media wiki is installed under wiki sub-folder
# or the html root documentation folder.
input = cfgrepo/template/php/${:filename}.in
# the default output.
#output = ${:target-folder}/${:filename}

########
# options for mediawiki configruation file
wgSitename = wiki
# defaut to config mediawiki to use short URL.
wgScriptPath = /wiki
wgScriptExtension = .php
wgArticlePath = /wiki/$1
wgUsePathInfo = true
# database settings.
wgDBtype = mysql
wgDBhost = 10.0.0.1
# using the ports setting by default.
wgDBport = ${ports:mariadb}
wgDBname = mwdb
wgDBuser = mwuser
wgDBpassword = mwpassword
wgDBprefix = wm_
# user preferences
wgEmergencyContact = "site.admin@mysite.com"
wgPasswordSender = "NOREPLY@mysite.com"
# default skin
wgDefaultSkin = standard
