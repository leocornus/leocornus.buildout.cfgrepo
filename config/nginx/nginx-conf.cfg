###################################################################
#
# the standalone nginx web server config file.
#
###################################################################

[users]
# the default run user for Nginx server.
nginx = nginx

[settings]
# log directory save all log files.
log-directory = ${buildout:directory}/var/log
# etc directory save all configuration files.
etc-directory = ${buildout:directory}/etc
# run directory save all pid files.
run-directory = ${buildout:directory}/var

nginx-listen-port-ssl = 443
nginx-error_log-ssl = ${:log-directory}/nginx-ssl-error.log
nginx-access_log-ssl = ${:log-directory}/nginx-ssl-access.log

nginx-build-location = ${nginx-build:location}

########
# this part will generate the config file for Nginx Web server.
[nginx-conf]
recipe = collective.recipe.template
# properties will feed in the templage.
# this depends on nginx-build.cfg
output = ${settings:etc-directory}/nginx.conf
input = cfgrepo/template/nginx.conf.in
mode = 644
nginx-build-location = ${nginx-build:location}
####
# settings and default values for Nginx Web Server.
# these variable are used for http section of Nginx config file.
run-user = ${users:nginx} 
worker_processes = 5
pid = ${settings:log-directory}/nginx.pid

####
# upstream configuration.
upstreams =

####
# server configuation.
servers = 
    ${nginx-fpm-server:servers}

####
# the includes will be put in to the main nginx.conf file
# as an include line.
# We could use template recipe to generate another Nginx config file
# and include here.
includes = 
    # nothing for now.
    # include /full/path/to/config/file.conf;

####
# configs for supervisor.
supervisor-priority = 50
supervisor-program = 
    [program:nginx]
    command = ${:nginx-build-location}/sbin/nginx -c ${:output}
    process_name = nginx
    directory = ${:nginx-build-location}/sbin
    priority = ${:supervisor-priority}
    redirect_stderr = false

##############################
# generate the nginx config file which only contain 
# the server section.
# This is mainly for Nginx virtual host setting with "includes" directive.
#
[nginx-conf-server]
<= base-generate-file-from-inline
filename = nginx.conf
target-folder = ${buildout:directory}/etc
file-content = 
# using the fpm server as the default, also as the example.
    ${nginx-fpm-server:servers}

########
# the basic configuration for a Nginx server
#
# use <= to extends from this part.
#
# NOTE: check the part [nginx-base-server] for newer version.
#       we will keep this version for backward compatability.
#
[nginx-server-base-config]
####
# The following settings are for server section.
# This is provided as examples.
document-root = ${settings:document-root}
server_name = ${hosts:frontend-hostname}
listen = ${hosts:frontend-ip}:${ports:nginx}
# this will set the maxium POST sie, in byte,
# the default here is 2GB
client_max_body_size = 2147483647
error_log = ${settings:log-directory}/nginx-error.log
# set up nginx error_log level, one of following: 
# debug info notice warn error crit
error_log-level = debug
access_log = ${settings:log-directory}/nginx-access.log
# path the Nginx binary
nginx-build-location = ${settings:nginx-build-location}
# the index file name
index = index.html
####
# locations, will be used in the servers secttion.
locations = # no location for now.
####
# servers section, it will be used as the server section
# in the actual nginx.conf file.
servers = 
    server {
        client_max_body_size ${:client_max_body_size};

        listen ${:listen};
        server_name ${:server_name}; 

        error_log ${:error_log} ${:error_log-level};
        access_log ${:access_log};

        root ${:document-root};
        index ${:index};

        ${:locations}
    }

########
# the base config stub for nginx server directive.
#
# use <= to extends from this part.
#
[nginx-base-server]
####
# the servers section to config the server directive.
# we could config multiple servers here. 
# however, as the best practice, it is easier and clear to
# config different servers in different parts.
servers =
# here are the basic structure (skelton) of a Nginx server.
    server {
        listen ${:listen};
        server_name ${:server-name};

# SSL Certificate, it is empty by default.
# we could set up it by adding the cert and key.
        ${:ssl-cert}

# the root and index for static contents.
# this page has a very good explaination:
# - https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/
# In some case we don't need it we could set it to empty.
        ${:root-index}

# general directives, such as:
# - error_log, access_log
# - client_max_bocy_size
# It will be multiple lines, do NOT need ending ;
        ${:general-directives}

########
# using the default error page.
# nginx-error-pages is defined in file config/nginx/nginx-utils.cfg
        ${nginx-error-pages:error-all}

        ${:locations}
    }
#####=========================================
# here are default valuse for listen and server_name
# you could overwrite them in your part.
server-name = ${hosts:frontend-hostname}
listen = ${hosts:frontend-ip}:${ports:nginx}
#####=========================================
# ssl-cert
#
# settings for SSL certificate:
# default is empty, no SSL.
#
# this is related to listen attribute.
# to turn on you need set listen like following.
# listen = ${:ip}:${:port} ssl
#
ssl-cert-crt = /path/to/ssl/certificate.crt
ssl-cert-key = /path/to/ssl/certificate.key
# we set it to empty as default.
ssl-cert =
# sample certficate.
# for quick test, you could create self-signed SSL sertiticate:
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /path/to/cert.key -out /path/to/cert.crt
#    ssl_certificate ${:ssl-cert-crt};
#    ssl_certificate_key ${:ssl-cert-key};
#####=========================================
# General directives
#
# this is a section for Nginx general directives,
# for example:
#  - client_max_body_size: set up the max size for upload,
#    default is 1m
#  - error_log
#  - access_log
#
# use it as need. we set it to empty to use all default settings.
# check the following examples for how to use.
general-directives =
# by default, we will debug the error log.
    error_log ${:error-log} ${:error-log-level};
    access_log ${:access-log};
# example to set client max body size to 1GB.
#    client_max_body_size 1024m;
# this will set the maxium POST sie, in byte,
# the default here is 2GB
client_max_body_size = 2147483647
error-log = ${settings:log-directory}/nginx-error.log
# set up nginx error_log level, one of following: 
# debug info notice warn error crit
error-log-level = debug
access-log = ${settings:log-directory}/nginx-access.log
#####=========================================
# root-index
#
# the default root and index directive.
# simply set to empty if we don't need it.
document-root = ${settings:document-root}
index = index.html
root-index =
    root ${:document-root};
    index ${:index};
#####=========================================
# locations
#
# set up locations here.
# to align with default value of root-index,
# we have a very simple location here.
locations = 
    location / {
        autoindex on;
    }

########
# A sample nginx server section, which could be used directly 
# in the main Nginx configuration file. 
# The fastcgi settings here is based on the Django built-in flup server.
[nginx-fcgi-sample-server]
# clone from the base config.
<= nginx-server-base-config
fastcgi_pass = 127.0.0.1:8080
####
# locations
locations = 
    location / {

        # the default include seems break the PATH_INFO param.
        #include ${nginx-build:location}/conf/fastcgi_params;
        # some fastcgi params
        fastcgi_connect_timeout 60;
        fastcgi_send_timeout 180;
        fastcgi_read_timeout 180;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        fastcgi_intercept_errors on;

        fastcgi_pass ${:fastcgi_pass};
        fastcgi_param PATH_INFO $fastcgi_script_name;
        fastcgi_param REQUEST_METHOD $request_method;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_param CONTENT_TYPE $content_type;
        fastcgi_param CONTENT_LENGTH $content_length;
        fastcgi_pass_header Authorization;
        fastcgi_param REMOTE_ADDR $remote_addr;

        # track uploads in the 'uploadprogress' zone
        # uploads expires 30s after they finish.
        #track_uploads uploadprogress 30s;
    }

########
# basic config for using php-fpm as fastcgi for PHP application.
[nginx-fpm-server]
<= nginx-server-base-config
fastcgi_pass = 127.0.0.1:9100
APPLICATION_ENV = development
locations = 
    # if the request starts with our frontcontroller, pass it on to fastcgi
    location ~ \.php$ {

        # some fastcgi params
        fastcgi_connect_timeout 60;
        fastcgi_send_timeout 180;
        fastcgi_read_timeout 180;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        fastcgi_intercept_errors on;
        #  
        #fastcgi_index index.php;
        fastcgi_pass ${:fastcgi_pass};
        include ${:nginx-build-location}/conf/fastcgi_params;
        fastcgi_param SCRIPT_FILENAME ${:document-root}$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_script_name;
        # this is for Zend Application.
        #fastcgi_param APPLICATION_ENV ${:APPLICATION_ENV};

        # track uploads in the 'uploadprogress' zone
        # uploads expires 30s after they finish.
        #track_uploads uploadprogress 30s;
    }
