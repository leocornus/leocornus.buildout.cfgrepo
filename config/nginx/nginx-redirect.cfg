###################################################################
#
# this buildout config try to host some interesting redirect rules
# implemented by using Nginx
#

###############################################
# 
# basic requirement for a redirect server.
#
[nginx-redirect-server]
# By default, we will use general settings hosts and ports for 
# the listen directive.
# you could simply change this by provide the host and port
listen = ${hosts:frontend-ip}:${ports:nginx}
# By default, we will use _ as server name, which means for all
# servers.
# you could customize based on your requirement.
server-name = _
# $host and $request_uri are Nginx configuration variables.
redirect-to = https://$host$request_uri
servers =
    server {
        listen ${:listen};
        server_name ${:server-name};
        return 301 ${:redirect-to};
    }

###############################################
# 
# this simplest Nginx server to redirct all request to 
# another URL, it could be https
#
[nginx-redirect-all-server]
<= nginx-redirect-server
listen = ${hosts:frontend-ip}:8433

#################################################
# 
# the location directive could be very powerful for the redirect
# it supports ReExp
#
# this post has great instruction:
# https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms
#
[nginx-redirect-locaion-server]
port = 8000
listen = ${hosts:frontend-ip}:${:port}
servers = 
    server {
        listen ${:listen};
        server_name _;

# ~* tilde and asterisk together tells a case-insensitive 
# regular expression match
        location ~* /(abc|cde) {
            return 301 http://www.new.com;
        }

# try to understand the difference of ending slash 
        location ~* /(abc|cde)/ {
            return 301 http://www.example.com;
        }
    }
