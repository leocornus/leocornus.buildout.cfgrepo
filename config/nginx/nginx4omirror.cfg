###################################################################
#
#               OMirror Platform Nginx Configuration
# 
# This build out config is try to generate the Nginx configration
# file for OMirror platform.
# 
# OMirror platform is build as a demostration platform 
# for different purpose, including: case study etc.
###################################################################

####################
#
# this part will generate a Nginx configuration server based on
# the php-fpm CGI engine.
#
# It will extend from part nginx-fpm-wordpress, 
# which is defined in file:
#  - config/nginx/nginx4wordpress.cfg
#
####################
[nginx-fpm-omirror]
<= nginx-fpm-wordpress
# OMirror will have the following locations.
locations = 
    ${:location-static}
    ${:location-root}
    ${:location-wiki}
    ${:location-uploadprogress}
    ${:location-php}

# static files for OMirror platform:
location-static =
    location ~* ^.+\.(${:file-extensions})$ {
        # by pass for wiki pages.
        try_files $uri /wiki/index.php;
        #rewrite ^/?get_group_doc=(.*)$ /wp-content/blogs.dir/1/files/group-documents/$1 last;

        rewrite ^/.*(/wp-(content|admin|includes)/.*\.(${:file-extensions}))$ $1 last;
        rewrite ^.*/files/(.*(${:file-extensions}))$ /wp-includes/ms-files.php?file=$1 last;
        # for media and mds
        rewrite ^/media/(.*(${:file-extensions}))$ //${:server_name}/mds/internal/$1 permanent;
        rewrite ^/mds/(.*(${:file-extensions}))$ /mds/index.php?q=$1 last;

        expires 30d;
        break;
    }

# as we install WordPress against the root URL,
# the root location will mainly handle WordPress application.
location-root =
    location / {

        index index.php;

        # customized solution for group documentations
        if ($args ~ "^get_group_doc=(.*)") {
            set $filename $1;
            rewrite ^.*$ /wp-content/blogs.dir/1/files/group-documents/$filename last;
        }

        # redirect rule for media player,
        # TODO: why we need this?
        //rewrite ^/media/player(.*)$ http://bulket.s3.amazonaws.com/player$1 permanent;

        #rewrite for sitemaps
        rewrite ^(.*/)?sitemap.xml /wp-content/sitemap.php last;

        # WordPress pretty URLs
        if (-f $request_filename) {
            expires max;
            break;
        }

        if (-d $request_filename) {
            break;
        }

        if (!-e $request_filename) {
            # mds Zend application
            rewrite ^/mds/(.*)$ /mds/index.php?q=$1 last;

            # Wordpress rewrite
            rewrite ^.+/?(/wp-.*) $1 last;
            rewrite ^.+/?(/.*\.php)$ $1 last;
            rewrite ^(.+)$ /index.php?q=$1 last;
        }

        error_page 404 = /index.php?q=$uri;
    }

# handle wiki pages,
# NOTE: there are some corresponding settings in LocalSettings.php
location-wiki =
    location /wiki {
        index index.php;
        #rewrite "^/wiki/([^?]*)(?:\?(.*))?" /wiki/index.php?title=$1&$args last;
        rewrite ^/wiki/index.php/(.*)$ /wiki/index.php?title=$1&$args last;
        rewrite ^/wiki/(.*)$ /wiki/index.php?title=$1&$args last;
    }

# the upload progress.
# this mainly serves the Meida upload process bar.
location-uploadprogress =
    location ^~ /nup-progress {
        # report uploads tracked in the 'proxied' zone
        report_uploads uploadprogress;
    }

# the Fast CGI engine for PHP.
location-php = 
    # if the request starts with our frontcontroller, 
    # pass it on to fastcgi
    location ~ \.php$ {

        # for Wordpress admin pages.
        rewrite ^/.*(/wp-(content|includes|admin)/.*.php)$ $1;
        # for some php files on root level: 
        # wp-login.php, wp-comments-post.php
        rewrite ^/.*(/wp-(login|comments-post|pass).php)$ $1;
        rewrite ^/((?!bbpress).)*(/xmlrpc.php)$ $2;

        # redirect wiki login page to WordPress login page.
        if ($args ~ title=Special:UserLogin(.*)$) {
            rewrite ^ /wp-login.php? redirect;
            #return 301;
        }
        # do the redirect for change password page too.
        if ($args ~ title=Special:ChangePassword(.*)$) {
            rewrite ^ /change-password? redirect;
            return 301;
        }

        # some fastcgi params
        fastcgi_connect_timeout 60;
        fastcgi_send_timeout 180;
        fastcgi_read_timeout 180;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;
        fastcgi_intercept_errors on;

        fastcgi_pass ${:fastcgi_pass};
        include ${:nginx-build-location}/conf/fastcgi_params;
        fastcgi_param SCRIPT_FILENAME ${:document-root}$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_script_name;

        # for Nginx behind proxy or cache server like Varnish
        fastcgi_param  SERVER_PORT        $http_x_forwarded_port;
        # this is for Zend Application.
        fastcgi_param APPLICATION_ENV development;

        # track uploads in the 'uploadprogress' zone
        # uploads expires 30s after they finish.
        track_uploads uploadprogress 30s;
    }
