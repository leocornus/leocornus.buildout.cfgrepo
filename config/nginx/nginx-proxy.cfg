###################################################################
#
# this buildout config try to host the configuration to 
# set up Nginx as a reverse proxy server.
#

[buildout]
extends =
    nginx-conf.cfg
    nginx-utils.cfg

###############################################
# 
# this simplest configuration to set up Nginx as 
# a reverse proxy server.
#
[nginx-proxy-server-base]
# extends from the base config
<=nginx-server-base-config
# set the default server name to the frontend hostname
server-name = ${hosts:frontend-hostname} 
# default ip is the frontend ip from general settings.
ip = ${hosts:frontend-ip}
# the default port is the port for nginx.
port = ${ports:nginx} 
listen = ${:ip}:${:port}
proxy-pass = http://localhost:8080
##########
#
# settings for SSL certificate:
# default is empty, no SSL.
#
# this is related to listen attribute.
# to turn on you need set listen like following.
# listen = ${:ip}:${:port} ssl
#
ssl-cert-crt = /path/to/ssl/certificate.crt
ssl-cert-key = /path/to/ssl/certificate.key
ssl-cert =
# sample certficate.
# for quick test, you could create self-signed SSL sertiticate:
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /path/to/cert.key -out /path/to/cert.crt
#    ssl_certificate ${:ssl-cert-crt};
#    ssl_certificate_key ${:ssl-cert-key};
##########
# General directives
# this is a section for Nginx general directives,
# for example:
#  - client_max_body_size: set up the max size for upload,
#    default id 1m
#
# use it as need. we set it to empty to use all default settings.
# check the following examples for how to use.
general-directives =
# by default, we will debug the error log.
    error_log ${:error_log} ${:error_log-level};
    access_log ${:access_log};
##########
# ------------ auth-basic directive
# add the authentication directive, default is nothing
# check the example part below for adding the basic_auth to a proxy server
auth-basic =
##########
# some settings for proxy server.
# The following settings are default settings,
# you could easily add more by extend it.
# Check the example reserve proxy for WordPress site.
proxy-settings = 
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
##########
# now we set the Nginx server directive.
servers =
    server {
        listen ${:listen};
        server_name ${:server-name};

# SSL Certificate:
        ${:ssl-cert}

# general directives, it will be multiple lines,
# do NOT need ending ;
        ${:general-directives}

        location / {
            ${:auth-basic}
            proxy_pass ${:proxy-pass};
            ${:proxy-settings}
        }

########
# using the default error page.
# nginx-error-pages is defined in file config/nginx/nginx-utils.cfg
        ${nginx-error-pages:error-all}
    }

#################################################
# 
# this is quick example to show how to use the base server
# to set up the proxy for your application.
#
[nginx-proxy-demo-server]
<= nginx-proxy-server-base
ip = 127.0.0.1
port = 80
server-name = test.proxy.com
proxy-pass = http://localhost:8088

#################################################
#
# example to show how to use auth_basic directive to protecte the
# proxy.
#
[nginx-proxy-demo-protected-server]
<= nginx-proxy-server-base
ip = 127.0.0.1
port = 80
server-name = test.proxy.com
proxy-pass = http://localhost:8088
########
# will using the utility part htpasswd-user-file to generate the
# auth basic user file.
# it is definde in file config/nginx/nginx-utils.cfg
htpasswd-file = ${htpasswd-user-file:htpasswd-file}
########
# auth_basic configuration.
#
auth-basic =
    auth_basic "Closed Site!";
    auth_basic_user_file ${:htpasswd-file};

#################################################
#
# example to show how to use the following directive to create
# a protected Proxy server but OPEN to certain IPs.
#
# * satisfy
# * allow
# * deny
# * auth_basic
#
[nginx-proxy-demo-satisfy-server]
<= nginx-proxy-server-base
ip = 127.0.0.1
port = 80
server-name = test.proxy.com
proxy-pass = http://localhost:8088
########
# will using the utility part htpasswd-user-file to generate the
# auth basic user file.
# it is definde in file config/nginx/nginx-utils.cfg
htpasswd-file = ${htpasswd-user-file:htpasswd-file}
allows = 
    allow 10.160.192.44;
    allow 10.160.192.88;

########
# auth_basic configuration.
#
auth-basic =
    satify any;
    ${:allows}
    deny all;

    auth_basic "Closed Site!";
    auth_basic_user_file ${:htpasswd-file};

###################################################
#
# example for a proxy server in front of WordPress
#
# The X-Forwarded proxy settings will work with wp-config.php
# to make a wordpress installation working on none 80 port
#
[nginx-proxy-demo-wordpress-server]
<= nginx-proxy-server-base
ip = 127.0.0.1
port = 80
server-name = wordpress.proxy.com
proxy-pass = http://localhost:8089
#########
# += will append the following at the end of the default proxy-seetings.
proxy-settings +=
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
