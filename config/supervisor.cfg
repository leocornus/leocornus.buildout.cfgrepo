################################################################
#
# The basic buildout config file to set up supervisord
#
################################################################

[users]
mysql = mysql

[ports]
supervisord = 9008

[hosts]
supervisord = 127.0.0.1

[settings]
log-directory = ${buildout:directory}/var/log
etc-directory = ${buildout:directory}/etc

########
# This part is using a recipe from Plone collective community.
# It offer the following things:
#  - install the supervisord egg, from pypi.python.org
#  - generate the shell script bin/supervisord
#  - generate the shell script bin/supervisorctl
#  - generate conf file parts/[PART NAME]/supervisor.conf
########
[supervisor]
recipe = collective.recipe.supervisor
# this port is the default value from recipe.
port = 127.0.0.1:9001
serverurl = http://127.0.0.1:9001
user = admin
password = adminsecret
childlogdir = ${settings:log-directory}
logfile = ${settings:log-directory}/supervisord.log
pidfile = ${settings:log-directory}/supervisord.pid
# this default program is depends on nginx build and config.
programs =
    10 mysqld ${mysql-build:location}/bin/mysqld [--defaults-file=${mysql-cnf:output}] false ${users:mysql}
    50 nginx ${nginx-build:location}/sbin/nginx [-c ${nginx-conf:output}] false

#
# generate the init script for supervisor.  
# This is target at Red Hat like linux.
# Following the following steps to activate this initial script:
#
# 1. copy the output shell script to /etc/init.d folder
# 2. use chkconfig to add the script name:
#    $ /sbin/chkconfig --add supervisor-init
# 3. Now the initial script is ready for /sbin/service.
#    $ /sbin/service supervisor-init start/stop/status
#
[supervisor-init]
recipe = collective.recipe.template
# the script name 
script-name = supervisor-init
output = ${buildout:bin-directory}/supervisor-init
# the default template is for Red Hat like Linux.
input = cfgrepo/template/supervisor-init.in
mode = 755

########
# The following parts will generate supervisor configuration files,
# shell scripts from template recipe and egg recipe.
# This will be more flexible in some cases.
########

########
# part to generate configuration file for supevisor.
# It will be based on the template:
#  - cfgrepo/template/supervisor.conf.in
########
[supervisor-conf]
recipe = collective.recipe.template
filename = supervisor.conf
output = ${settings:etc-directory}/${:filename}
input = cfgrepo/template/${:filename}.in
# setting for supervisor.conf.
#### 
# supervisord section
logfile = ${settings:log-directory}/supervisor.log
# One of critical, error, warn, info, debug, trace, or blather
loglevel = info
pidfile = ${settings:log-directory}/supervisor.pid
nodaemon = false
nocleanup = false
#### 
# inet_http_server
host = ${hosts:supervisord}
port = ${ports:supervisord}
username = admin
password = adminsecret
####
# programs managed by supervisor.
# set it empty as the default.
# in the case of +=, the programs will be appended at the end of 
# the programs list.
#
programs =
# leave it empty here
# it could be the following content:
#
# 1. the program section.
#    [program:nginx]
#    # this depends on nginx-build buildout.
#    command = ${nginx-build:location}/sbin/nginx -c ${nginx-conf:output}
#    process_name = nginx
#    directory = ${nginx-build:location}/sbin
#    priority = 50
#    redirect_stderr = false 
#
#2. reference from another buildout part.
#    # this depends on mysql-conf buildout.
#    ${mysql-cnf:supervisor-program}
#
#3. using the include section
#    # files will be a list of config files generated by using the 
#    # part supervisor-conf-programs
#    [include]
#    files = ${:files}

########
# This part will generate a supervisor config file,
# which will only have program section(s).
# This supervisor config file will be used fir include section
# of another supervisor config file.
#
# This part extends from a base part, which is defined in 
# file config/base.cfg
########
[supervisor-conf-programs]
<= base-generate-file-from-inline
filename = supervisor-programs.conf
target-folder = ${settings:etc-directory}
file-content =
    ${supervisor-conf:programs}

[supervisor-bin-base]
recipe = zc.recipe.egg
eggs = supervisor

########
# part to generate following shell scripts.
#  - bin/supervisord
#  - bin/supervisorctl
#
# It dependents on the following parts.
#  - supervisor-conf
#
# CONFLICT
# 
# This part will generate the same scripts with the following parts:
#  - supervisor
# 
# Do NOT try to use these two parts at the same time.
########
[supervisor-bin]
<= supervisor-bin-base
scripts = 
    supervisord=supervisord
    supervisorctl=supervisorctl
# assume the sys module is already imported.
#initialization = sys.argv.extend(["-c", "${supervisor-conf:output}"])
initialization = sys.argv[1:1]=["-c", "${supervisor-conf:output}"]

########
# This part will generate the pidproxy script in the 
# buildout bin folder.  
# The pidproxy will be used to manage processes like mysqld_safe.
# More details could be find here:
# http://www.supervisord.org/subprocess.html#pidproxy-program
########
[pidproxy-bin]
<= supervisor-bin-base
#scripts = pidproxy=pidproxy
scripts = pidproxy
